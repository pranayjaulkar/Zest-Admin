// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id            String     @id @default(uuid())
  storeId       String
  store         Store      @relation("StoreToBillboard", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  label         String
  imageUrl      String
  imagePublicId String
  categories    Category[] @relation("BillboardToCategory")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  billboardId String
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([billboardId])
  @@index([storeId])
}

model Size {
  id                String             @id @default(uuid())
  storeId           String
  store             Store              @relation("StoreToSize", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name              String
  value             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  productVariations ProductVariation[] @relation("ProductVariationToSize")

  @@index([storeId])
}

model Color {
  id                String             @id @default(uuid())
  storeId           String
  store             Store              @relation("StoreToColor", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name              String
  value             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  productVariations ProductVariation[] @relation("ProductVariationToColor")

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  name              String
  price             Decimal
  isFeatured        Boolean            @default(false)
  isArchived        Boolean            @default(false)
  images            Image[]            @relation("ProductToImage")
  orderItems        OrderItem[]        @relation("ProductToOrderItem")
  productVariations ProductVariation[] @relation("ProductVariationToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id String @id @default(uuid())

  productId String
  product   Product @relation("ProductToImage", fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  url                String
  cloudinaryPublicId String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())

  storeId String
  store   Store  @relation("StoreToOrder", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  orderItems OrderItem[] @relation("OrderToOrderItem")
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())

  orderId String
  order   Order  @relation("OrderToOrderItem", fields: [orderId], references: [id], onUpdate: Cascade)

  productId String
  product   Product @relation("ProductToOrderItem", fields: [productId], references: [id], onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([orderId])
}

model ProductVariation {
  id String @id @default(uuid())

  sizeId String
  size   Size   @relation("ProductVariationToSize", fields: [sizeId], references: [id], onUpdate: Cascade)

  colorId String
  color   Color  @relation("ProductVariationToColor", fields: [colorId], references: [id], onUpdate: Cascade)

  productId String
  product   Product @relation("ProductVariationToProduct", fields: [productId], references: [id], onUpdate: Cascade)

  name      String
  quantity  Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([colorId])
  @@index([sizeId])
}
