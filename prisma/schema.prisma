// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id            String     @id @default(uuid())
  storeId       String
  store         Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label         String
  imageUrl      String
  imagePublicId String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  categories    Category[] @relation("BillboardToCategory")

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([billboardId])
  @@index([storeId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id         String    @id @default(uuid())
  storeId    String
  store      Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean   @default(false)
  isArchived Boolean   @default(false)
  sizeId     String
  size       Size      @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color     @relation(fields: [colorId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  images     Image[]   @relation("ProductToImage")
  orderItems OrderItem[] @relation("ProductToOrderItem")

  @@index([storeId])
  @@index([sizeId])
  @@index([colorId])
  @@index([categoryId])
}

model Image {
  id                 String   @id @default(uuid())
  productId          String
  product            Product  @relation("ProductToImage", fields: [productId], references: [id])
  url                String
  cloudinaryPublicId String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] @relation("OrderToOrderItem")
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation("OrderToOrderItem", fields: [orderId], references: [id])
  productId String
  product   Product @relation("ProductToOrderItem", fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([orderId])
}
