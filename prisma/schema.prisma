generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
}

model Billboard {
  id                 String     @id @default(uuid())
  storeId            String
  store              Store      @relation("StoreToBillboard", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  label              String
  imageUrl           String
  cloudinaryPublicId String
  active             Boolean?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  categories         Category[] @relation("BillboardToCategory")

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  billboardId String
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("CategoryToProduct")

  @@index([billboardId])
  @@index([storeId])
}

model Size {
  id                String             @id @default(uuid())
  storeId           String
  store             Store              @relation("StoreToSize", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name              String
  value             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  productVariations ProductVariation[] @relation("ProductVariationToSize")

  @@index([storeId])
}

model Color {
  id                String             @id @default(uuid())
  storeId           String
  store             Store              @relation("StoreToColor", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name              String
  value             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  productVariations ProductVariation[] @relation("ProductVariationToColor")

  @@index([storeId])
}

model Product {
  id                String             @id @default(uuid())
  storeId           String
  store             Store              @relation("StoreToProduct", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId        String
  category          Category           @relation("CategoryToProduct", fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name              String
  price             Decimal
  isFeatured        Boolean            @default(false)
  isArchived        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  images            Image[]            @relation("ProductToImage")
  orderItems        OrderItem[]        @relation("ProductToOrderItem")
  productVariations ProductVariation[] @relation("ProductVariationToProduct")

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id                 String   @id @default(uuid())
  productId          String
  product            Product  @relation("ProductToImage", fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  url                String
  cloudinaryPublicId String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  delivered  Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  orderItems OrderItem[] @relation("OrderToOrderItem")

  @@index([storeId])
}

model OrderItem {
  id                 String           @id @default(uuid())
  orderId            String
  order              Order            @relation("OrderToOrderItem", fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId          String
  product            Product          @relation("ProductToOrderItem", fields: [productId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  productVariationId String
  productVariation   ProductVariation @relation("ProductVariationToOrderItem", fields: [productVariationId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([productId])
  @@index([orderId])
}

model ProductVariation {
  id         String      @id @default(uuid())
  name       String
  quantity   Int
  colorId    String
  color      Color       @relation("ProductVariationToColor", fields: [colorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId  String?
  product    Product?    @relation("ProductVariationToProduct", fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sizeId     String
  size       Size        @relation("ProductVariationToSize", fields: [sizeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] @relation("ProductVariationToOrderItem")
  updatedAt  DateTime    @updatedAt
  createdAt  DateTime    @default(now())

  @@index([productId])
  @@index([colorId])
  @@index([sizeId])
}
